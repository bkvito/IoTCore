/*global define*/
define([
        '../../Core/defined',
        '../../Core/destroyObject',
        '../../Core/DeveloperError',
		'../../Core/defineProperties',
		'../../Core/defaultValue',
		'../../Core/Color',
		'../../Core/Cartesian2',
		'../../Core/Cartesian3',
		'../../Core/Cartographic',
		'../../Core/buildModuleUrl',
		'../../Core/Math',
		'../../Core/Rectangle',
		'../../Core/Ellipsoid',
		'../../Core/ScreenSpaceEventType',
		'../../Core/ScreenSpaceEventHandler',
		'../../Scene/HeightReference',
		'../../Scene/VerticalOrigin',
		'../../Scene/HorizontalOrigin',
		'../../Scene/LabelStyle',
		'../../DataSources/Entity',
		'../../DataSources/CallbackProperty',
		'./DrawingTypes',
		'./Direction',
		'./pickGlobe'
    ], function (
        defined,
        destroyObject,
        DeveloperError,
		defineProperties,
		defaultValue,
		Color,
		Cartesian2,
		Cartesian3,
		Cartographic,
		buildModuleUrl,
		CesiumMath,
		Rectangle,
		Ellipsoid,
		ScreenSpaceEventType,
		ScreenSpaceEventHandler,
		HeightReference,
		VerticalOrigin,
		HorizontalOrigin,
		LabelStyle,
		Entity,
		CallbackProperty,
		DrawingTypes,
		Direction,
		pickGlobe) {
    'use strict';

	function MarkerPrimitive(options, markerCollection) {
		options = defaultValue(options, {});

		this._url = defaultValue(options.url, buildModuleUrl("Widgets/Images/DrawingManager/Marker.png"));
		this._selectUrl = defaultValue(options.selectUrl, buildModuleUrl("Widgets/Images/DrawingManager/poi-small.png"));
		this._color = defaultValue(options.color, new Color(1.0, 1.0, 1.0, 1.0));
		this._scale = defaultValue(options.scale, 1.0);
		this._labelFillColor = defaultValue(options.labelFillColor, Color.WHITE);
		this._labelOutlineWidth = defaultValue(options.labelOutlineWidth, 1);
		this._labelBackgroundColor = defaultValue(options.labelBackgroundColor, '#000080');
		this._font = defaultValue(options.font, 'Bold 14px Microsoft YaHei');
		this._direction = defaultValue(options.direction, Direction.TOP);
		this._heightMap = {};

		var lon = defaultValue(options.lon, 0);
		var lat = defaultValue(options.lat, 0);
		var height = defaultValue(options.height, 0);
		this._name = defaultValue(options.name, '');
		this._heightReference = defaultValue(options.heightReference, HeightReference.CLAMP_TO_GROUND);
		this._translucencyByDistance = options.showByDistance;

		this._cartographic = Cartographic.fromDegrees(lon, lat, height);

		var position = Cartesian3.fromDegrees(lon, lat, height);
		this._selectable = defaultValue(options.selectable, false);
		this.ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);
		this._drawingMode = DrawingTypes.DRAWING_MARKER;

		var properties = defaultValue(options.data, {});
		var self = this;
		this._callback = defaultValue(options.callback, defaultDescribe);
		var entity = new Entity({name : this._name, position : position, properties : properties, showInfo : defaultValue(options.showInfo, true)});
		entity.description = new CallbackProperty(createDescriptionCallback(self._callback, entity.properties), false);
		entity.markerPrimitive = this;
		entity.show = false;

		this._billboard = markerCollection._billboards.add({
			id : entity,
			position : position,
			image : this._url,
			verticalOrigin : VerticalOrigin.BOTTOM,
			horizontalOrigin : HorizontalOrigin.CENTER,
			pixelOffset : Cartesian2.ZERO,
			eyeOffset : Cartesian3.ZERO,
			scale : this._scale,
			color : this._color,
			translucencyByDistance : this._translucencyByDistance,
			//heightReference : HeightReference.CLAMP_TO_GROUND
		});
		this._billboard.markerPrimitive = this;
		var _self = this;

		imgLoad(this._url, function(width, height){
			_self._imageWidth = width;
			_self._imageHeight = height;
			if(!_self._selectable){
				createLabel(markerCollection, _self, position, _self._name, height, width);
			}
		});
		
		imgLoad(this._selectUrl, function(width, height){
			_self._selectImageWidth = width;
			_self._selectImageHeight = height;
			if(_self._selectable){
				createLabel(markerCollection, _self, position, _self._name, height, width);
			}
		});

		this._content = options;
		this._markerCollection = markerCollection;
	}

	function updateLabelPosition(marker, height, width){
		if(!defined(marker._label))
			return;

		var margin = 3;
		var offset = Cartesian2.ZERO;
		var verticalOrigin = VerticalOrigin.CENTER;
		var horizontalOrigin = HorizontalOrigin.CENTER;

		switch(marker._direction){
			case Direction.TOP:
				offset = new Cartesian2(-4, -height*marker._scale-margin);
				verticalOrigin = VerticalOrigin.BOTTOM;
				break;
			case Direction.BOTTOM:
				offset = new Cartesian2(-4, margin);
				verticalOrigin = VerticalOrigin.TOP;
				break;
			case Direction.LEFT:
				offset = new Cartesian2(-width*marker._scale / 2 - margin - 4, 0);
				horizontalOrigin = HorizontalOrigin.RIGHT;
				break;
			case Direction.RIGHT:
				offset = new Cartesian2(width*marker._scale / 2 - 4 + margin, 0);
				horizontalOrigin = HorizontalOrigin.LEFT;
				break
		}
		
		marker._label.pixelOffset = offset;
		marker._label.verticalOrigin = verticalOrigin;
		marker._label.horizontalOrigin = horizontalOrigin;
	}

	function createLabel(markerCollection, marker,  position, name, height, width){
		var margin = 3;
		var offset = Cartesian2.ZERO;
		var verticalOrigin = VerticalOrigin.BOTTOM;
		var horizontalOrigin = HorizontalOrigin.CENTER;

		switch(marker._direction){
			case Direction.TOP:
				offset = new Cartesian2(-4, -height*marker._scale-margin);
				verticalOrigin = VerticalOrigin.BOTTOM;
				break;
			case Direction.BOTTOM:
				offset = new Cartesian2(-4, margin);
				verticalOrigin = VerticalOrigin.TOP;
				break;
			case Direction.LEFT:
				offset = new Cartesian2(-width*marker._scale / 2 - margin - 4, 0);
				horizontalOrigin = HorizontalOrigin.RIGHT;
				break;
			case Direction.RIGHT:
				offset = new Cartesian2(width*marker._scale / 2 - 4 + margin, 0);
				horizontalOrigin = HorizontalOrigin.LEFT;
				break
		}

		marker._label = markerCollection._labels.add({
				position : position,
				text : name,
				font : marker._font,
				fillColor : marker._labelFillColor,
				outlineColor : marker._labelFillColor,
				outlineWidth : marker._labelOutlineWidth,
				style : LabelStyle.FILL,	//LabelStyle.FILL_AND_OUTLINE
				verticalOrigin : verticalOrigin,
				horizontalOrigin : horizontalOrigin,
				pixelOffset : offset,
				eyeOffset : Cartesian3.ZERO,
				backgroundColor : marker._labelBackgroundColor,
				translucencyByDistance : marker._translucencyByDistance,
				//heightReference : HeightReference.CLAMP_TO_GROUND
		});
		marker._label.markerPrimitive = marker;
	}

	defineProperties(MarkerPrimitive.prototype, {
        /**
         * Returns the number of labels in this collection.  This is commonly used with
         * {@link MarkerPrimitive#get} to iterate over all the labels
         * in the collection.
         * @memberof MarkerPrimitive.prototype
         * @type {Number}
         */
        content : {
            get : function() {
                return this._content;
            }
        },
		/**
         * Returns the number of labels in this collection.  This is commonly used with
         * {@link LabelCollection#get} to iterate over all the labels
         * in the collection.
         * @memberof MarkerPrimitive.prototype
         * @type {Number}
         */
        billboard : {
            get : function() {
                return this._billboard;
            }
        },
		/**
         * Returns the number of labels in this collection.  This is commonly used with
         * {@link LabelCollection#get} to iterate over all the labels
         * in the collection.
         * @memberof MarkerPrimitive.prototype
         * @type {Number}
         */
        label : {
            get : function() {
                return this._label;
            }
        },
		position : {
			get : function() {
                return this._billboard.position;
            },
			set : function(value) {
				if(defined(this._billboard)){
					this._billboard.position = value;
				}

				if(defined(this._label)){
					this._label.position = value;
				}

				if(defined(this._billboard.id)){
					this._billboard.id.position = value;
				}

				this._cartographic = this.ellipsoid.cartesianToCartographic(value);
			}
		},

		/**
         * Returns the number of labels in this collection.  This is commonly used with
         * {@link MarkerPrimitive#get} to iterate over all the labels
         * in the collection.
         * @memberof MarkerPrimitive.prototype
         * @type {Number}
         */
        selectable : {
            get : function() {
                return this._selectable;
            },
			set : function(value){
				var url = value ? this._selectUrl : this._url;
				var height = value ? this._selectImageHeight : this._imageHeight;
				var width = value ? this._selectImageWidth : this._imageWidth;
				updateLabelPosition(this, height, width);

				if(defined(this._billboard)){
					this._billboard.image = url;
				}

				this._selectable = value;
			}
        },
		/**
         * Returns the number of labels in this collection.  This is commonly used with
         * {@link MarkerPrimitive#get} to iterate over all the labels
         * in the collection.
         * @memberof MarkerPrimitive.prototype
         * @type {Number}
         */
        selectUrl : {
            get : function() {
                return this._selectUrl;
            },
			set : function(value){
				var self = this;
				if(this._selectUrl === value)
					return;
				this._selectUrl = value;
				if(this.selectable && defined(this._billboard)){
					this._billboard.image = value;
				}
				
				imgLoad(this._selectUrl, function(width, height){
					self._selectImageWidth = width;
					self._selectImageHeight = height;
					if(self.selectable){
						updateLabelPosition(self, height, width);
					}
				});
			}
        },
		/**
         * Returns the number of labels in this collection.  This is commonly used with
         * {@link MarkerPrimitive#get} to iterate over all the labels
         * in the collection.
         * @memberof MarkerPrimitive.prototype
         * @type {Number}
         */
        url : {
            get : function() {
                return this._url;
            },
			set : function(value){
				var self = this;
				if(this._url === value)
					return;
				this._url = value;
				if(!this.selectable && defined(this._billboard)){
					this._billboard.image = value;
				}

				imgLoad(value, function(width, height){
					self._imageWidth = width;
					self._imageHeight = height;
					if(!self.selectable){
						updateLabelPosition(self, height, width);
					}
				});
			}
        },

		showByDistance : {
			get : function() {
                return this._translucencyByDistance;
            },
			set : function(value){
				if(this._translucencyByDistance === value)
					return;
				this._translucencyByDistance = value;

				if(defined(this._billboard)){
					this._billboard.translucencyByDistance = value;
				}

				if(defined(this._label)){
					this._label.translucencyByDistance = value;
				}
			}
		},

		imageSize : {
			get : function() {
                return {width : this._imageWidth, height : this._imageHeight};
            }
		},

		selectImageSize : {
			get : function() {
                return {width : this._selectImageWidth, height : this._selectImageHeight};
            }
		},

		Cartographic : {
			get : function() {
                return this._cartographic;
            }
		},

		/**
         * Returns the number of labels in this collection.  This is commonly used with
         * {@link MarkerPrimitive#get} to iterate over all the labels
         * in the collection.
         * @memberof MarkerPrimitive.prototype
         * @type {Number}
         */
        markerCollection : {
            get : function() {
                return this._markerCollection;
            }
        },
		
		text : {
			get : function() {
				return this._name;
			},
			set : function(value) {
				this._name = value;
				if(defined(this._label)){
					this._label.text = value;
				}

				if(this._billboard && this._billboard.id){
					this._billboard.id.name = value;
				}
			}
		},

		drawingMode : {
			get : function() {
				return this._drawingMode;
			},
			set : function(value) {
				this._drawingMode = value;
			}
		},
		
		properties : {
			get : function() {
				if(this._billboard && this._billboard.id){
					return this._billboard.id.properties;
				}
			},
			set : function(value) {
				if(this._billboard && this._billboard.id){
					this._billboard.id.properties = value;
				}
			}
		},

		showInfo : {
			get : function() {
				if(this._billboard && this._billboard.id){
					return this._billboard.id.showInfo;
				}
			},
			set : function(value) {
				if(this._billboard && this._billboard.id){
					this._billboard.id.showInfo = value;
				}
			}
		},

		heightReference : {
			get:function(){
				return this._heightReference;
			},
			set:function(value){
				this._heightReference = value;
			}
		},
		callback : {
			get:function(){
				return this._callback;
			},
			set:function(value){
				var self = this;
				this._callback = value;
				this._billboard.id.description = new CallbackProperty(createDescriptionCallback(value, self._billboard.id.properties), false);
			}
		}
    });

	MarkerPrimitive.prototype.updatePosition = function(lon, lat, height){
		var heightPos = defaultValue(height, 0);
		this._cartographic = Cartographic.fromDegrees(lon, lat, heightPos);
		var position = Cartesian3.fromDegrees(lon, lat, heightPos);
		this.position = position;
		this._content.lon = lon;
		this._content.lat = lat;
		this._heightMap = {};
		this.needToUpdatePosition = true;
	}

	MarkerPrimitive.prototype.getType = function(){
		return this._drawingMode;
	}

	MarkerPrimitive.prototype._containHeight = function(level){
		return (level in this._heightMap);
	}

	MarkerPrimitive.prototype._pushHeight = function(level, height){
		this._heightMap[level] = height;
	}

	MarkerPrimitive.prototype._getHeight = function(level, height){
		return this._heightMap[level];
	}

	var position = new Cartographic();
	MarkerPrimitive.prototype.filter = function(primitive) {
		var type = primitive.getType();
		
		var position = this.ellipsoid.cartesianToCartographic(this.billboard.position);
		var epsilon = CesiumMath.EPSILON5;
		var rectangle = new Rectangle(position.longitude - epsilon, 
				position.latitude - epsilon, 
				position.longitude + epsilon,
				position.latitude + epsilon);

		if(type === DrawingTypes.DRAWING_POLYLINE ||
			type === DrawingTypes.DRAWING_POLYGON ){
			if(!defined(primitive.positions))
				return false;

			for(var i = 0; i < primitive.positions.length; i++){
				position = this.ellipsoid.cartesianToCartographic(primitive.positions[i], position);
				if(Rectangle.contains(rectangle, position))
					return true;
			}
		} else if (type === DrawingTypes.DRAWING_MARKER ){
			for(var i = 0; i < primitive.length; i++){
				var marker = primitive.get(i);
				position = this.ellipsoid.cartesianToCartographic(marker.billboard.position, position);
				if(Rectangle.contains(rectangle, position))
					return true;
			}
		}

		return false;
	}

	MarkerPrimitive.prototype.toLonLats = function(result) {
		var cartographi = this.ellipsoid.cartesianToCartographic(this.position);
		if (!defined(result)) {
            result = new Array(1);
        } else {
            result.length = 1;
        }

        result[0] = [CesiumMath.toDegrees(cartographi.longitude), CesiumMath.toDegrees(cartographi.latitude)];

		return result;
	}

	MarkerPrimitive.prototype.setEditable = function (isEditable) {
		isEditable = defaultValue(isEditable, true);

		this._editable = isEditable;

		if(!defined(this.owner)){
			return;
		}
		var drawHelper = this.owner;
		var marker = this;
		var _self = this;
		
		if(isEditable){
			function enableRotation(enable) {
				drawHelper._scene.screenSpaceCameraController.enableRotate = enable;
			}
			marker.billboard.owner = drawHelper;
			setListener(marker.billboard, 'leftDown', function (position) {
				// TODO - start the drag handlers here
				// create handlers for mouseOut and leftUp for the marker and a mouseMove
				function onDrag(position) {
					marker.position = position;
					//_self.executeListeners({ name: 'drag', positions: position });
				}
				function onDragEnd(position) {
					handler.destroy();
					enableRotation(true);
					drawHelper._dispatchOverlayEdited(_self, { name: 'dragEnd', positions: position });
					//_self.executeListeners({ name: 'dragEnd', positions: position });
				}

				var handler = new ScreenSpaceEventHandler(drawHelper._scene.canvas);

				handler.setInputAction(function (movement) {
					var cartesian = pickGlobe(drawHelper._scene, movement.endPosition);
					if (cartesian) {
						onDrag(cartesian);
					} else {
						onDragEnd(cartesian);
					}
				}, ScreenSpaceEventType.MOUSE_MOVE);

				handler.setInputAction(function (movement) {
					var cartesian = pickGlobe(drawHelper._scene, movement.position);
					onDragEnd(cartesian);
				}, ScreenSpaceEventType.LEFT_UP);

				enableRotation(false);

			});
		} else {
			removeListener(marker, 'leftDown');
		}
	}

	/**
     * Returns true if this object was destroyed; otherwise, false.
     * <p>
     * If this object was destroyed, it should not be used; calling any function other than
     * <code>isDestroyed</code> will result in a {@link DeveloperError} exception.
     * </p>
     *
     * @returns {Boolean} <code>true</code> if this object was destroyed; otherwise, <code>false</code>.
     *
     * @see MarkerPrimitive#destroy
     */
    MarkerPrimitive.prototype.isDestroyed = function() {
        return false;
    };

	function setListener(primitive, type, callback) {
		primitive[type] = callback;
    }

	function createDescriptionCallback(describe, properties) {
		return function(time, result) {
			return describe(properties);;
		};
	}

	function defaultDescribe(properties) {
		var html = '';
        for ( var key in properties) {
            if (properties.hasOwnProperty(key)) {
                //if (key === nameProperty || simpleStyleIdentifiers.indexOf(key) !== -1) {
               //     continue;
                //}
                var value = properties[key];
                if (defined(value)) {
                    if (typeof value === 'object') {
                        html += '<tr><th>' + key + '</th><td>' + defaultDescribe(value) + '</td></tr>';
                    } else {
                        html += '<tr><th>' + key + '</th><td>' + value + '</td></tr>';
                    }
                }
            }
        }

        if (html.length > 0) {
            html = '<table class="cesium-infoBox-defaultTable"><tbody>' + html + '</tbody></table>';
        }

        return html;
	}

	function imgLoad(url, callback) {
		var img = new Image();
		img.onload = function () {
			callback(img.width, img.height);
			img.onload = null;
		};
		img.src = url;
//		if (img.complete) {
//			callback(img.width, img.height);
//		} 
	};

	return MarkerPrimitive;
});