/*global define*/
define([
        '../../ThirdParty/when',
        '../../Core/defined',
        '../../Core/DeveloperError',
		'../../Core/Cartesian3',
		'../../Core/IntersectionTests',
		'../../Core/Ray',
		'../../Core/Matrix4',
		'../../Core/BoundingSphere',
		'../../Core/Ellipsoid',
		'../../Core/Cartographic'
    ], function(
        when,
        defined,
        DeveloperError,
		Cartesian3,
		IntersectionTests,
		Ray,
		Matrix4,
		BoundingSphere,
		Ellipsoid,
		Cartographic) {
    'use strict';

    
	var pickGlobeScratchRay = new Ray();
    var scratchDepthIntersection = new Cartesian3();
    var scratchRayIntersection = new Cartesian3();
	var scratchRadii = new Cartesian3();
	var scratchEllipsoid = new Ellipsoid();
	var scratchCartographic = new Cartographic();;

    function pickSurface(scene, mousePosition, height, stepHeight, result) {
        var globe = scene.globe;
        var camera = scene.camera;
        if (!defined(globe)) {
            return undefined;
        }
		var ellipsoid = globe.ellipsoid;

		var deferred = when.defer();
		do
		{
			var ray = camera.getPickRay(mousePosition, pickGlobeScratchRay);
			if(defined(height)){
				if(defined(stepHeight)){
					height += stepHeight;
				}

				deferred.resolve(getRayPointByHeight(ray, height, result));
				break;
			}

			var rayIntersection = globe.pick(ray, scene, scratchRayIntersection);

			var depthIntersection;
			//if (scene.pickPositionSupported) {
			//	depthIntersection = scene.pickPosition(mousePosition, scratchDepthIntersection);
			//	deferred.resolve(getNearCameraPositon(ray, depthIntersection, rayIntersection, camera, ellipsoid, stepHeight, result));
			//	break;
			//} else {
				var promise = samplePickCesiumTileset(scene, 5, ray);
				when(promise, function(depthIntersection){
					deferred.resolve(getNearCameraPositon(ray, depthIntersection, rayIntersection, camera, ellipsoid, stepHeight, result));
				});
				
			//}
		}
		while (false);
		
		return deferred.promise;
    }

	function getNearCameraPositon(ray, depthIntersection, rayIntersection, camera, ellipsoid, stepHeight, result){
		var pickDistance = defined(depthIntersection) ? Cartesian3.distance(depthIntersection, camera.positionWC) : Number.POSITIVE_INFINITY;
		var rayDistance = defined(rayIntersection) ? Cartesian3.distance(rayIntersection, camera.positionWC) : Number.POSITIVE_INFINITY;

		if(defined(stepHeight)){
			var intersection;
			if (pickDistance < rayDistance) {
				intersection = depthIntersection;
			} else {
				intersection = rayIntersection;
			}
			var cart = ellipsoid.cartesianToCartographic(intersection);
			return getRayPointByHeight(ray, cart.height + stepHeight, result);
		} else {
			if (pickDistance < rayDistance) {
				return Cartesian3.clone(depthIntersection, result);
			}

			return Cartesian3.clone(rayIntersection, result);
		}
	}

    function samplePickCesiumTileset(scene, level, ray) {
        //>>includeStart('debug', pragmas.debug);
        if (!defined(scene)) {
            throw new DeveloperError('scene is required.');
        }
        if (!defined(level)) {
            throw new DeveloperError('level is required.');
        }
        if (!defined(ray)) {
            throw new DeveloperError('ray is required.');
        }
        //>>includeEnd('debug');

        var deferred = when.defer();

        function doSamplingWhenReady() {
			var cesiumTilesets = [];
			for(var i = 0; i < scene.realPrimitives.length; i++){
				var primitvie = scene.realPrimitives.get(i);
				if(defined(primitvie._name) && (primitvie._name === "Cesium3DTileset")){
					if(!primitvie.ready){
						setTimeout(doSamplingWhenReady, 10);
					}
					else{
						cesiumTilesets.push(primitvie);
					}
						
				}
			}
			
			if(cesiumTilesets.length < 1)
				deferred.resolve(undefined);
			else {
				doSampling(cesiumTilesets, scene._camera.positionWC, level, ray, 
					function(updatedPositions) {
						deferred.resolve(updatedPositions);
				});
			}
            
        }

        doSamplingWhenReady();

        return deferred.promise;
    }


	var scratchStack = [];
	var scratchRaySphereIntersectionResult = {
        start : 0.0,
        stop : 0.0
    };

	function doSampling(cesiumTilesets, positionWC, level, ray, callback){
		var stack = scratchStack;
		var jsonPromises = [];
		var tileRequestSet = {};
		var tileRequests = [];
		var primitiveRequestSet = {};
		var primitiveRequests = [];
		var callAgain = false;

		for(var j = 0; j < cesiumTilesets.length; j++){
				var cesiumTileset = cesiumTilesets[j];
				var root = cesiumTileset._root;
				root.pydlevel = 0;
				stack.push(root);
				while (stack.length > 0) {
					var t = stack.pop();
					var rootBoundingSphere = IntersectionTests.raySphere(ray, t._boundingVolume, scratchRaySphereIntersectionResult);
					if (!defined(rootBoundingSphere)) {
						continue;
					}

					var children = t.children;
					var childrenLength = children.length;
					
					if(t.hasTilesetContent){
						if(t.contentUnloaded){
							callAgain = true;
							if (!tileRequestSet.hasOwnProperty(t.content._url)) {
								tileRequestSet[t.content._url] = true;
								tileRequests.push(t);
							}
						}
						else if(!t.contentReady){
							callAgain = true;
						}
						
					}
					
					if(t.hasContent && (t.pydlevel >= level || childrenLength == 0))
					{ 
						if (!primitiveRequestSet.hasOwnProperty(t.content._url)) {
							// When tile is requested for the first time
							var value = {
								tile : t,
								rays : []
							};
							primitiveRequestSet[t.content._url] = value;
							primitiveRequests.push(value);
						}

						// Now append to array of points for the tile
						primitiveRequestSet[t.content._url].rays.push(ray);
					}
					else
					{
						for (var i = 0; i < childrenLength; ++i) {
							if(children[i].hasTilesetContent || t.hasTilesetContent){
								children[i].pydlevel = t.pydlevel;
							} else {
								children[i].pydlevel = t.pydlevel + 1;
							}
							stack.push(children[i]);
						}	
					}
				}
			}

		for (var i = 0; i < tileRequests.length; ++i) {
            var t = tileRequests[i];
			t.requestContent();
		}
		
		if(callAgain){
			setTimeout(function() {
                doSampling(cesiumTilesets, positionWC, level, ray, callback);
			}, 10);
		} else {
			return loadModelsData(primitiveRequests, positionWC, ray, callback);
		}
	}

	function loadModelsData(primitiveRequests, positionWC, ray, callback){
		// Send request for each required tile
		var positionsSet = {};
        var tilePromises = [];
        for (var i = 0; i < primitiveRequests.length; ++i) {
            var tileRequest = primitiveRequests[i];
            var requestPromise = tileRequest.tile.content.requestContent();
            var tilePromise = when(requestPromise, createInterpolateFunction(tileRequest, positionWC, positionsSet), createMarkFailedFunction(tileRequest));
            tilePromises.push(tilePromise);
        }

		when.all(tilePromises, function() {
			var position = positionsSet[ray.direction.toString()]
			callback(position);
        });
	}

	function createCompareIntersectionsFunction(rayOrigin) {
        return function(a, b) {
			var aDist = Cartesian3.distanceSquared(a, rayOrigin);
			var bDist = Cartesian3.distanceSquared(b, rayOrigin);
            return  aDist - bDist;
        };
    }

    var scratchV0 = new Cartesian3();
    var scratchV1 = new Cartesian3();
    var scratchV2 = new Cartesian3();
    var scratchResult = new Cartesian3();
	var scratchCenter = new Cartesian3();
	var scratchGetModelHeightRay = new Ray();
	var sizeOfUint16 = Uint16Array.BYTES_PER_ELEMENT;
	var sizeOfFloat32 = Float32Array.BYTES_PER_ELEMENT;
    function createInterpolateFunction(tileRequest, positionWC, positionsSet) {
        var rays = tileRequest.rays;
        return function(nodeCommands){
			try { 

				for (var i = 0; i < rays.length; ++i) {
					var modelIntersections = [];
					var ray = rays[i];
					//获取相交模型高度
					for(var j = 0; j < nodeCommands.length; j++){
						var command = nodeCommands[j].command;
						if(defined(command.boundingVolume)){
							//nodeBuffer.boundingSphere.center = Matrix4.multiplyByPoint(modelMatrix, nodeBuffer.boundingSphere.center, scratchCenter);
							var nodeBoundingSphere = IntersectionTests.raySphere(ray, command.boundingVolume, scratchRaySphereIntersectionResult);
							if(!defined(nodeBoundingSphere))
								continue;
						}
						
						var indexView = command.indexView;
						var vertexView = command.vertexView;
						
						for(var k = 0; k < command.count; k+=3){
							var i0 = indexView.getUint16(k*sizeOfUint16, true) * 3;	
							var i1 = indexView.getUint16((k+1)*sizeOfUint16, true) * 3;
							var i2 = indexView.getUint16((k+2)*sizeOfUint16, true) * 3;
						
							var v0 = Cartesian3.fromElements(vertexView.getFloat32(i0*sizeOfFloat32, true), vertexView.getFloat32((i0+1)*sizeOfFloat32, true), vertexView.getFloat32((i0+2)*sizeOfFloat32, true));
							var v1 = Cartesian3.fromElements(vertexView.getFloat32(i1*sizeOfFloat32, true), vertexView.getFloat32((i1+1)*sizeOfFloat32, true), vertexView.getFloat32((i1+2)*sizeOfFloat32, true));
							var v2 = Cartesian3.fromElements(vertexView.getFloat32(i2*sizeOfFloat32, true), vertexView.getFloat32((i2+1)*sizeOfFloat32, true), vertexView.getFloat32((i2+2)*sizeOfFloat32, true));
							
							v0 = Matrix4.multiplyByPoint(command.modelMatrix, v0, scratchV0);
							v1 = Matrix4.multiplyByPoint(command.modelMatrix, v1, scratchV1);
							v2 = Matrix4.multiplyByPoint(command.modelMatrix, v2, scratchV2);

							var intersection = IntersectionTests.rayTriangle(ray, v0, v1, v2, true, scratchResult);
							if (defined(intersection)) {
								modelIntersections.push(Cartesian3.clone(intersection));
							}
						}
					}

					if(modelIntersections.length > 1)
						modelIntersections.sort(createCompareIntersectionsFunction(positionWC));
					if(modelIntersections.length > 0){
						if (!positionsSet.hasOwnProperty(ray.direction.toString())) {
							positionsSet[ray.direction.toString()] = modelIntersections[0];
						}
						else
						{
							var samePositions = [positionsSet[ray.direction.toString()], modelIntersections[0]];
							samePositions.sort(createCompareIntersectionsFunction(positionWC));
							positionsSet[ray.direction.toString()] = samePositions[0];
						}
					}
				}
			}catch (e){
				console.log("Error: " + e);
			}
        };
    }

    function createMarkFailedFunction(tileRequest) {
		//console.log("Error:" + tileRequest.tile.content._url);
		//console.log("Error:" + tileRequest.tile.content._url);
        //var tilePositions = tileRequest.positions;
        return function(error) {
			console.log("Error:" + error + tileRequest.tile.content._url);
        //    for (var i = 0; i < tilePositions.length; ++i) {
        //        var position = tilePositions[i];
        //        position.height = undefined;
        //    }
        };
    }

    return pickSurface;
});
